(defun terminal-p (x)
  (and (symbolp x)
       (eql (char (symbol-name x) 0) #\!)))

(defun terminal-q (x)
  (and (symbolp x)
       (eql (char (symbol-name x) 0) #\-)))

(defun non-terminals ()
  (mapcar #'car *grammar4*))

(defun find-undefined-nonterminals ()
  (let* ((temp (find-terminals))
	 (undef-non-term)
	 (n-term (non-terminals)))
    (dolist (x temp undef-non-term)
      (and (member x temp)
	   (not (terminal-p x))
	   (not (member x n-term))
	   (push x undef-non-term)))))

(defun unused-rewrite ()
  (let* ((n-term (non-terminals))
	 (flat-g (flatten *grammar4*))
	 (unused)
	 (count 0))
    (mapcar #'(lambda (x)
		(dolist (y flat-g)
		  (if (eql x y)
		    (setf count (+ count 1))))
		(when (eql count 1)
		  (unless (eql x (caar *grammar4*))
		    (push x unused)))
		(setf count 0)) n-term)
    unused))

(defun find-terminals ()
  (let* ((n-term (non-terminals))
	 (new-grammar (flatten *grammar4*))
	 (unused))
    (dolist (x new-grammar unused)
      (unless (terminal-q x)
	(unless (member x n-term)
	  (pushnew x unused))))))

;;Finds all non-terms plus duplicates   
(defun find-non-terminals ()
  (let* ((n-term (non-terminals))
	(new-grammar (flatten *grammar4*))
	(my-grammar))
    (mapcar #'(lambda (x)
		(unless (member x n-term)
		  (setf new-grammar (remove x new-grammar)))) new-grammar)
    (setf my-grammar (butlast new-grammar))))

(deftest !terminal-p ()
  (test (terminal-p '!Yasashii?) t))

(deftest !find-undefined-nonterminals ()
  (test (find-undefined-nonterminals) '(article noun name)))

(deftest !unused-rewrite ()
  (test (unused-rewrite) '(pronoun verb her he prep)))
